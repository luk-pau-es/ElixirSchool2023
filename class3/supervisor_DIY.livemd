# GenServer, Supervisors DYI

## GenServer - Shop Inventory Cache

Implement GenServer for storing shop inventory. You should be able to perform basic CRUD operations (Create, Read, Update, Delete)

TIP: State of the GenServer can be stored as list or map

TIP: You can use `struct`, map or keyword to store product information, example fields: name, price

```elixir
defmodule ShopInventory do
  use GenServer

  # Client API
  def create_item(item) do
    GenServer.cast(ShopInventory, {:create, item})
  end

  def list_items() do
    GenServer.call(ShopInventory, :get)
  end

  def delete_item(item) do
    GenServer.cast(ShopInventory, {:delete, item})
  end

  def get_item_by_name(name) do
    GenServer.call(ShopInventory, {:get, name})
  end

  def start_link(_opts) do
    GenServer.start_link(__MODULE__, [], name: __MODULE__)
  end

  # Server API
  def init(state) do
    {:ok, state}
  end

  def handle_call(:get, _from, state) do
    {:reply, state, state}
  end

  def handle_call({:get, name}, _from, state) do
    reply =
      state
      |> Enum.find(fn x -> x[:name] == name end)

    {:reply, reply, state}
  end

  def handle_call(_, _, state) do
    {:reply, :not_ok, state}
  end

  def handle_cast({:create, item}, state) do
    {:noreply, [item | state]}
  end

  def handle_cast({:delete, item}, state) do
    {:noreply, List.delete(state, item)}
  end

  def handle_cast(_, state) do
    {:noreply, state}
  end
end
```

## Supervisor - Shop Supervisor

Using Shop Inventory GenServer from previous exercise implement Supervisor module with 3 different shop inventories.

```elixir
product_1 = %{name: "Milk", price: 4}
product_2 = %{name: "Bread", price: 6}
product_3 = %{name: "Ham", price: 20}

{:ok, pid} = ShopInventory.start_link(:ok)

ShopInventory.create_item(product_1)
ShopInventory.create_item(product_2)
ShopInventory.create_item(product_3)

ShopInventory.list_items() |> IO.inspect()
ShopInventory.get_item_by_name("Milk") |> IO.inspect()

ShopInventory.delete_item(product_2)

ShopInventory.list_items() |> IO.inspect()
```

## Shop Inventory - Advanced

Using GenServer `ShopInventory` from first exercise instead using GenServer state as storage medium for shop inventory use [ETS](https://elixir-lang.org/getting-started/mix-otp/ets.html)
